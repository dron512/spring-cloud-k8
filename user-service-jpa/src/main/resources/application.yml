# application.yml 10000
# bootsrap.yml configserver 20000 -> 환경설정 우선순위
server:
  port: 10000

spring:
  application:
    name: user-service
  cloud:
    openfeign:
      loadbalancer:
        ribbon:
          enable: false
  datasource:
    username: root
    password: 1234
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/msa?serverTimezone=Asia/Seoul
    # driver-class-name: com.mysql.cj.jdbc.Driver
    # url: jdbc:mysql://192.168.0.29:3306/msa?characterEncoding=UTF-8&serverTimezone=UTC
  output:
    ansi:
      enabled: always

  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate.format_sql: true
    show-sql: true
    open-in-view: false

# sql:
#   init:
#     platform: mysql

logging:
  level:
    io.micrometer.core.instrument: DEBUG    # Micrometer 관련 로그
    org.springframework.boot.actuate.metrics: TRACE    # Spring Boot Actuator 메트릭 관련 로그
    org.springframework.web: TRACE    # HTTP 요청 관련 로그 (Actuator HTTP 엔드포인트)
#  마이크로 서비스간 통신 로그 출력
    com.green.userservice.feignclient: TRACE
#  pattern:
#    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"  # 파일 로그 패턴
    
# 로그를 파일에 저장하는 방법
#  file:
#    name: logs/app.log  # 로그 파일 경로 설정

management:
  metrics:
    enable:
      user: true
      timed: true
    tags:
      application: ${spring.application.name}
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info, metrics, prometheus
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: B3
      produce: B3
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
    base-url: http://localhost:9411
    enabled: true

# jwt 비밀번호

token:
  expiration_time: 86400000
  access_token_expiration_time: 86400 # 하루
  refresh_token_expiration_time: 2592000 # 한달
  secret: abcdefghijklmnopqrstuvwxyz01234567890

gateway:
  ip: 127.0.0.1

order-service-url: ${ORDER-SERVICE-URL}
